#include <stdio.h>
#include <string.h>
#include <stdlib.h>
struct action_s
{
    u_int8_t state;
    u_int8_t action;
    u_int8_t rule;
    u_int8_t numtoks;
};

struct parser_tables_s
{
    size_t num_states;
    size_t num_terms;
    size_t num_nonterms;
    struct action_s ** ACTION;
    int ** GTTBL;
};
#0#
#define SHIFT 1
#define REDUCE 2
#define ACCEPT 4
#define AERROR 8
#define STALL 15
#define NUM_STATES #0#
#define NUM_NONTERMS #0#
#define NUM_TERMS #0#
#ifndef SCSTYPE
#define SCSTYPE int
#endif
void scparse(void);
extern int sclex(FILE* thefile);
void run_code(int state);
//int translate(int tokn);
static SCSTYPE yylval;
 FILE* scin2;
/*
const static int8_t tok_trans_tbl[NUM_TERMS] = #0#;
 */
const static int GTTBL[NUM_STATES][NUM_NONTERMS] = #0#;
const static struct action_s ACTION[NUM_STATES][NUM_TERMS] = #0#;
static u_int8_t stack[100];
static SCSTYPE values[100];
static u_int8_t* top = &stack[0];
static SCSTYPE* vtop = &values[0];
void scparse(void){
    memset(stack,0,sizeof(u_int8_t)*100);
    memset(values,0,sizeof(SCSTYPE)*100);
//    memset(yylval,0,sizeof(SCSTYPE)*100);
    register int tokn;
    register int ntindex;
    tokn = (sclex(scin2));
	if(tokn == -1)
		tokn = NUM_TERMS-1;
//    printf("token %d\n",tokn);
    while(1){
//	   printf("currently in state %d\n",*top);
	   switch(ACTION[*top][tokn].action){
		  case STALL:
//			 printf("stalling\n");
			 top++;
			 vtop++;
			 *top = ACTION[*(top-1)][tokn].state;
			 break;
		  case SHIFT:
//			    printf("shifting\n");
			    top++;
			    vtop++;
			    *top = ACTION[*(top-1)][tokn].state;
			 	memcpy(&vtop[0],&yylval,sizeof(SCSTYPE));
//			    *vtop = yylval;
			    tokn = (sclex(scin2));
				if(tokn == -1)
					tokn = NUM_TERMS-1;
//			 	printf("token %d\n",tokn);
			    break;
		  case REDUCE:
//			    printf("reducing\n");
			 	vtop = vtop - (ACTION[*top][tokn].numtoks-1);
			 	goto run_code;
		  comeback:
			 	//run_code(ACTION[(*top)][tokn].state);
			    ntindex = ACTION[(*top)][tokn].rule;
//			    printf("reduced by some production %d and head production %d num tokens %d\n",ACTION[*(top)][tokn].state,
//					 ACTION[*(top)][tokn].rule,ACTION[*(top)][tokn].numtoks);
			    top = top - (ACTION[*top][tokn].numtoks-1);
			    *top = GTTBL[*(top-1)][ntindex];
			    break;
		  case ACCEPT:
			    printf("accepting\n");
			    goto pender;
			    break;
		  default:
			    printf("parsing error: found error as value in table\n");
			    printf("token %d\n",tokn);
			    exit(EXIT_FAILURE);
	   }
    }
run_code:
    switch(ACTION[(*top)][tokn].state){
		  #0#
		  default:
//			 printf("reduced by rule %d\n",ACTION[(*top)][tokn].state);
//		  memcpy(&vtop[0],&vtop[1],sizeof(SCSTYPE));
//			 vtop[0] = vtop[1];
			 break;
			 
    }
    goto comeback;
pender:
    printf("ending parser\n");
//    fclose(fd);
}
/*
int translate(int tokn){
    printf("translating token val\n");
	   for(int a=0;a<NUM_TERMS;a++){
		  if(tok_trans_tbl[a] == tokn){
			 printf("found token %d as %d\n",tokn,a);
			 return a;
		  }
	   }
    printf("didn't find token val %d returning itself\n",tokn);
    return tokn;
}
*/
#0#
